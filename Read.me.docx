README.md
1. Determine the image name and ID for your docker image using docker images.

$ docker images
> < >
> REPOSITORY        TAG        IMAGE ID       CREATED      SIZE
> IMAGE_NAME        VERSION    IMAGE_ID      
2. Using the Docker image ID, tag the docker image, replacing OWNER with the name of the user or organization account that owns the repository, REPOSITORY with the name of the repository containing your project, IMAGE_NAME with name of the package or image, HOSTNAME with the hostname of your GitHub Enterprise Server instance, and VERSION with package version at build time.

If your instance has subdomain isolation enabled:
$ docker tag IMAGE_ID docker.HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION

If your instance has subdomain isolation disabled:
$ docker tag IMAGE_ID HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION

3. If you haven't already built a docker image for the package, build the image, replacing OWNER with the name of the user or organization account that owns the repository, REPOSITORY with the name of the repository containing your project, IMAGE_NAME with name of the package or image, VERSION with package version at build time, HOSTNAME with the hostname of your GitHub Enterprise Server instance, and PATH to the image if it isn't in the current working directory.

If your instance has subdomain isolation enabled:
$ docker build -t docker.HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION PATH

If your instance has subdomain isolation disabled:
$ docker build -t HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION PATH

4. Publish the image to GitHub Packages.
If your instance has subdomain isolation enabled:
$ docker push docker.HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION

If your instance has subdomain isolation disabled:
$ docker push HOSTNAME/OWNER/REPOSITORY/IMAGE_NAME:VERSION
